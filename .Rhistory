xnpv(5, cashflows)
xnpv(0.05, cashflows)
cfnpvs <- (for (t in chron_order$cfamount){
chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)
})
xnpv(0.05, cashflows)
chron_order
apply(chron_order, cfamount, +1000000)
apply(chron_order, cfamount, chron_order$cfamount+1000000)
apply(chron_order, cfamount, sum)
apply(chron_order, 2, sum)
sapply(chron_order$cfamount. function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
sapply(chron_order$cfamount, chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
sapply(chron_order, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365), simplify = TRUE)
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365), simplify = FALSE)
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
sum(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)))
as.vector(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)))
apply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
lapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
mapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
tapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))[1]
sum(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))[1])
as.list(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)))
as.vector(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)))
for (t in chron_order$cfamount){
chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)
}
x<-for (t in chron_order$cfamount){
chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)
}
x
x<-for (t in 1:length(chron_order$cfamount){
chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)
}
x<-for (t in 1:length(chron_order$cfamount)){
chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)
}
x
as.vector(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)))
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
sapply(chron_order$cfamount[1]:chron_order$cfamount[length(chron_order$cfamount)], function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))
unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)))
z <- unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365)))
z
class(z)
sum(z)
z
class(z)
as.vector(z)
class(z)
apply(1,1,sum,na.rm=TRUE)
length(z)
apply(z,1,sum,na.rm=TRUE)
dim(z)
z
sum(z, na.rm = T)
sum (for (t in chron_order$cfamount){
chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365), na.rm = T
}
sum (for (t in chron_order$cfamount){
chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365), na.rm = T
)}
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.numeric(chron_order$cfdate[t]-t0)/365))), na.rm = T)
}
xnpv(0.05, cashflows)
library(lubridate)
library(plyr)
cfdate <- ymd(c("2019-08-03", "2023-02-03", "2022-08-03", "2024-04-04"))
cfamount <- c(-51000000, 30000000, 90000000, 22000000)
cashflows <- data.frame(cfdate, cfamount)
xnpv(0.05, cashflows)
library(lubridate)
library(plyr)
cfdate <- ymd(c("2019-08-03", "2023-02-03", "2022-08-03", "2024-04-03"))
cfamount <- c(-51000000, 30000000, 90000000, 22000000)
cashflows <- data.frame(cfdate, cfamount)
xnpv(0.05, cashflows)
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))), na.rm = T)
}
xnpv(0.05, cashflows)
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(as.duble(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)))), na.rm = T)
}
xnpv(0.05, cashflows)
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(as.double(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)))), na.rm = T)
}
xnpv(0.05, cashflows)
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) as.double(chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)))), na.rm = T)
}
xnpv(0.05, cashflows)
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) as.double(chron_order$cfamount[t]/(1+rate)**(as.double((chron_order$cfdate[t]-t0)/365))), na.rm = T)
}
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) as.double(chron_order$cfamount[t]/(1+rate)**(as.double((chron_order$cfdate[t]-t0)/365))), na.rm = T)
}
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) as.double(chron_order$cfamount[t]/(1+rate)**(as.double((chron_order$cfdate[t]-t0)/365))), na.rm = T)
}
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) as.double(chron_order$cfamount[t]/(1+rate)**(as.double((chron_order$cfdate[t]-t0)/365))), na.rm = T)
}
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) as.double(chron_order$cfamount[t]/(1+rate)**(as.double((chron_order$cfdate[t]-t0)/365))), na.rm = T)
}
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) as.double(chron_order$cfamount[t]/(1+rate)**(as.double((chron_order$cfdate[t]-t0)/365))))), na.rm = T)
}
xnpv(0.05, cashflows)
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) as.double(chron_order$cfamount[t])/(1+rate)**(as.double((chron_order$cfdate[t]-t0)/365)))), na.rm = T)
}
xnpv(0.05, cashflows)
#'
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**((chron_order$cfdate[t]-t0)/365))), na.rm = T)
}
xnpv(0.05, cashflows)
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))), na.rm = T)
}
xnpv(0.05, cashflows)
z =  3
class(z)
is.double(z, length = 2)
is.double(z)
z
z <- xnpv(0.05, cashflows)
z
is.double(z)
library(lubridate)
library(plyr)
cfdate <- ymd(c("2019-08-03", "2023-02-03", "2022-08-03", "2024-04-03"))
cfamount <- c(-51000000.00, 30000000, 90000000, 22000000)
cashflows <- data.frame(cfdate, cfamount)
z <- xnpv(0.05, cashflows)
z
library(lubridate)
library(plyr)
cfdate <- ymd(c("2019-08-03", "2023-02-03", "2022-08-03", "2024-04-03"))
cfamount <- c(-51000000.00, 30000000.00, 90000000.00, 22000000.00)
cashflows <- data.frame(cfdate, cfamount)
z <- xnpv(0.05, cashflows)
z
class(z)
is.double(z)
is.integer(z)
is.numeric(z)
xirr(cashflows, 0.1)
xirr <- function (cashflows, guess, tol, m){
if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
}
if (missing(m)){
m = 500
}
secant(xnpv(rate,cashflows), guess, tol, m)}
xirr(cashflows, 0.1)
library(cmna)
xirr(cashflows, 0.1)
xirr(cashflows = )
xirr(cashflows)
cashflows
xirr <- function (cashflows, guess, tol, m){
if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
}
if (missing(m)){
m = 500
}
secant(xnpv(guess,cashflows), guess, tol, m)}
xirr(cashflows)
guess
xirr:::guess
library(lubridate)
library(plyr)
cfdate <- ymd(c("2019-08-03", "2023-02-03", "2022-08-03", "2024-04-03"))
cfamount <- c(-51000000, 30000000, 90000000, -22000000)
cashflows <- data.frame(cfdate, cfamount)
z <- xnpv(0.05, cashflows)
z
cfdate <- ymd(c("2019-08-03", "2023-02-03", "2022-08-03", "2024-04-03"))
cfamount <- c(-51000000, 30000000, 90000000, -22000000)
cashflows <- data.frame(cfdate, cfamount)
cashflows
xnpv(0.05, cashflows)
unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)))
chron_order <-  arrange(cashflows,cfdate)
chron_order
t0 = chron_order$cfdate[1]
t0
unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)))
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))
cfdate <- ymd(c("2019-08-03", "2023-02-03", "2022-08-03", "2024-04-03", "2025-03-03", "2026-03-03"))
cfamount <- c(-51000000, 30000000, 90000000, -22000000, 10000000, 10000000)
cashflows <- data.frame(cfdate, cfamount)
cashflows
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))
xnpv(0.05, cashflows)
cfamount
sapply(chron_order$cfamount[t], function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))
z <- sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))
z
apply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))
apply(chron_order$cfamount, chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))
chron_order
xnpv(0.05, cashflows)
chron_order
chron_order <- arrange(cashflows, cfdate)
chron_order
z <- sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))
z
z <- sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))[1]
z
unlist(z)
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 = chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))[1]), na.rm = T)
}
xnpv(0.05, cashflows)
cfdate <- ymd(c("2019-08-03", "2023-02-03", "2022-08-03", "2024-04-03", "2025-03-03"))
cfamount <- c(-51000000, 30000000, 90000000, -22000000, 10000000)
cashflows <- data.frame(cfdate, cfamount)
xnpv(0.05, cashflows)
xirr(cashflows, 0.1)
xirr <- function (cashflows, guess, tol, m){
if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
}
if (missing(m)){
m = 500
}
secant(xnpv, guess, tol, m)}
xirr(cashflows, 0.1)
cashflows
xirr <- function (cashflows, guess, tol, m){
if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
}
if (missing(m)){
m = 500
}
secant(xnpv(guess, cashflows), guess, tol, m)}
xirr(cashflows, 0.1)
D(xnpv(guess, cashflows), 'guess')
D(xnpv(rate, cashflows), 'rate')
library(optimx)
library(lubridate)
library(plyr)
cfdate <- ymd(c("2019-08-03", "2023-02-03", "2022-08-03", "2024-04-03", "2025-03-03"))
cfamount <- c(-51000000, 30000000, 90000000, -22000000, 10000000)
cashflows <- data.frame(cfdate, cfamount)
cashfows
cashflows
library(plyr)
chron_order<-arrange(cashflows, cfdate)
chron_order
len <- length(chron_order$cfamount)
len
t0 <- chron_order$cfdate[1]
to
t0
sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))
vec <- vector("double", len)
vec
for (i in 1:len){}
for (t in 1:len){chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)}
for (t in 1:len){s[t]<-chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)}
for (t in 1:len){vec[t]<-chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)}
vec
xnpv <- sum(vec)
xnpv
xnpv2 <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 <- chron_order$cfdate[1]
len <- length(chron_order$cfamount)
vec <- vector("double", len)
for (t in 1:len){vec[t]<-chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)}
xnpv2 <- sum(vec)
return(xnpv2)
}
xnpv2(0.05, cashflows)
#'
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 <- chron_order$cfdate[1]
sum (unlist(sapply(chron_order$cfamount, function(t) chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365))[1]), na.rm = T)
}
xnpv(0.05, cashflows)
system(xnpv)
library(dplyr)
library(microbenchmark)
microbenchmark(xnpv(0.05, cashflows), xnpv2(0.05, cashflows), times = 10000)
library(cmna)
xirr <- function (cashflows, guess, tol, m){
if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
}
if (missing(m)){
m = 500
}
f <- xnpv(guess, cashflows)
secant(xnpv(guess, cashflows), guess, tol, m)}
xirr(cashflows)
secant_method <- function(f, x0, tol) {
if(missing(tol)){
tol = 0.000000001
}
x1 = x0*1.1
if (abs(x1-x0)/abs(x1) > tol){
x1 =  x1-f(x1)*(x1-x0)/(f(x1)-f(x0))
}
}
xnpv <- function(rate, cashflows){
chron_order <-  arrange(cashflows,cfdate)
t0 <- chron_order$cfdate[1]
len <- length(chron_order$cfamount)
vec <- vector("double", len)
for (t in 1:len){vec[t]<-chron_order$cfamount[t]/(1+rate)**(as.double(chron_order$cfdate[t]-t0)/365)}
xnpv <- sum(vec)
return(xnpv)
}
secant_method(xnpv(x0, cashflows), 0.1)
secant_method(xnpv(x0, cashflows), x0 = 0.1)
secant_method(xnpv(x0, cashflows), x0 = 0.1, 0.0001)
secant_method(xnpv(0.05, cashflows), x0 = 0.1, 0.0001)
irr <- secant_method(xnpv(0.05, cashflows), x0 = 0.1, 0.0001)
irr
irr <- secant_method(xnpv(0.05, cashflows), x0 = 0.1, 0.00000001)
irr
xnpv(0.05, cashflows)
xnpv(-0.05, cashflows)
xnpv(0.10, cashflows)
xnpv(0.20, cashflows)
xnpv(0.30, cashflows)
xnpv(0.25, cashflows)
xnpv(0.275, cashflows)
xnpv(0.28125, cashflows)
xnpv(0.28325, cashflows)
while(xnpv ]=0){if(xnpv>0){}}
test <- function(rateguess, cashflows){ xnpv0 <- xnpv(rateguess, cashflows) while(xnpv0 !=0){if(xnpv0>0){print("positve")} else {print("negative")}}}
test <- function(rateguess, cashflows){ xnpv0 <- xnpv(rateguess, cashflows)  if(xnpv0>0){print("positve")} else {print("negative")}}
test <- function(rateguess, cashflows){ xnpv0 <- xnpv(rateguess, cashflows)  return if(xnpv0>0){print("positve")} else {print("negative")}}
test <- function(rateguess, cashflows){ xnpv0 <- xnpv(rateguess, cashflows)  test<- if(xnpv0>0){print("positve")} else {print("negative")}}
test <- function(rateguess, cashflows){ xnpv0 <- xnpv(rateguess, cashflows)  test<- ifelse(xnpv0>0,print("positve"),print("negative"))}
test <- function(rateguess, cashflows){ xnpv0 <- xnpv(rateguess, cashflows)  ifelse(xnpv0>0,print("positve"),print("negative"))}
test <- function(rateguess, cashflows){ifelse(xnpv(rateguess, cashflows)>0,print("positve"),print("negative"))}
test(0.05, cashflows)
test <- function(rateguess, cashflows){ifelse(xnpv(rateguess, cashflows)>0,"positive",print("negative"))}
test(0.05, cashflows)
test <- function(rateguess, cashflows){ifelse(xnpv(rateguess, cashflows)>0,"positive","negative")}
test(0.4, cashflows)
test <- function(guess, cashflows, tol){ if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
} ifelse(xnpv(rateguess, cashflows)>0,"positive","negative")}
test <- function(guess, cashflows, tol){ if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
} if(xnpv(rateguess, cashflows)>0){"positive"} else{"negative"}
test <- function(guess, cashflows, tol){ if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
} f<-if(xnpv(rateguess, cashflows)>0){"positive"} else{"negative"}
xirr <- function (cashflows, guess, tol, m){
if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
}
if (missing(m)){
m = 500
}
f <- xnpv(guess, cashflows)
secant_method(f, guess, tol, m)}
xirr(cashflows)
xirr <- function (cashflows, guess, tol){
if(missing(guess)){
guess = 0.1
}
if(missing(tol)){
tol = 0.000000001
}
#  if (missing(m)){
#    m = 500
#  }
f <- xnpv(guess, cashflows)
secant_method(f, guess, tol)}
xirr(cashflows)
z<-xirr(cashflows)
z
library(optimx)
z <- optimx(0.05, xnpv)
tol
tol <- 0.000000001
z <- optim(0.05, xnpv, method = "L-BFGS-B")
z <- optim(0.05, xnpv(par, cashflows), method = "L-BFGS-B")
par <- 0.05
z <- optim(par, xnpv(par, cashflows), method = "L-BFGS-B")
z <- optim(rate = 0.05, xnpv(par, cashflows), method = "L-BFGS-B")
z <- optim(rate = 0.05, xnpv(rate, cashflows), method = "L-BFGS-B")
cashflows
uniroot(xnpv(rate,cashflows), -INF:INF, tol = tol)
uniroot(xnpv(rate,cashflows), -1000:1000, tol = tol)
uniroot(xnpv(rate,cashflows), c(-INF,INF), tol = tol)
uniroot(xnpv(rate,cashflows), c(-1000,1000), tol = tol)
install.packages("jrvFinance")
irr.solve(xnpv(r.guess, cashflows), c(-10, 100), r.guess = 0.1)
library(jrvFinance)
irr.solve(xnpv(r.guess, cashflows), c(-10, 100), r.guess = 0.1)
irr.solve(xnpv(guess, cashflows), c(-10, 100), r.guess = 0.1)
irr.solve(xnpv(0.05, cashflows), c(-10, 100), r.guess = 0.1)
f <- funtion(guess){xnpv((guess, cashflows))}
f <- function(guess){xnpv((guess, cashflows))}
f <- function(guess){xnpv(guess, cashflows)}
f(0.05)
f(0.2)
secant(f, 0.05)
secant(f, 0.05)
install.packages(c("httr", "knitr", "markdown", "pkgbuild", "tinytex", "xml2"))
library(Rtools)
library(rtools)
library(pkgbuild)
has_rtools()
check_rtools()
rtools_path()
library(devtools)
library(roxygen2)
devtools::use_data_raw()
cashflows
getwd()
use_data(cashflows, overwrite = TRUE)
load("~/GitHub/cfvalue/data/cashflows.rda")
load("~/GitHub/cfvalue/data/cashflows.rda")
use_date_raw(data.R)
use_date_raw()
use_data_raw(datta.R)
use_data_raw(data.R)
use_data_raw()
use_testthat()
test()
test()
library(cfvalue)
library(cfvalue)
library(cfvalue)
test()
library(plyr)
test()
cashflows
test(xnpv(0.05, cashflows))
